静态成员变量：
   所有对象共享同一份数据
   编译阶段就分配内存
   类内声明，类外初始化操作

class Person{
public:
    static int m_A; //静态成员变量
    //静态成员变量也是有访问权限的
private:
    static int m_B; //静态成员变量也是有访问权限的
}
int Person::m_A = 10;
int Person::m_B = 10;

void test01(){
    Person p1;
    p1.m_A = 100;
    Person p2;
    p2.m_A = 200;
    cout << "p1.m_A = " << p1.m_A << endl;
    cout << "p2.m_A = " << p2.m_A << endl; //200
    cout << "Person::m_A = " << Person::m_A << endl; //100
}

void test02(){
    //静态成员变量 不属于某个对象上，所有对象都共享同一份数据
    //因此静态成员变量有两种访问方式
    //1. 通过对象进行访问
    Person p;
    p.m_A = 1000;
    cout << "p.m_A = " << p.m_A << endl;

    
    //2. 通过类名进行访问
    cout << "Person::m_A = " << Person::m_A << endl;
} 


静态成员函数：
   所有对象共享同一个函数
   静态成员函数只能访问静态成员变量
   
class Person{
public:
    static void func(){
        m_A = 100;
        //m_B = 100; //错误，不可以访问非静态成员变量，无法区分到底是那个对象的m_B
        cout << "static void func 调用" << endl;
    }
    static int m_A; //静态成员变量
    int m_B; //非静态成员变量
}
静态函数也是有访问权限的 